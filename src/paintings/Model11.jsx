/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
 
export function Model11(props) {
  const brushBubblesMap = useTexture("/Textures/Brush_Bubbles.png");
const brushCometMap = useTexture("/Textures/Brush_Comet.png");
const brushDiamondHullMap = useTexture("/Textures/Brush_DiamondHull.png");
const brushDotsMap = useTexture("/Textures/Brush_Dots.png");
const brushDuctTapeMap = useTexture("/Textures/Brush_DuctTape.png");
const brushEmbersMap = useTexture("/Textures/Brush_Embers.png");
const brushHyperColorMap = useTexture("/Textures/Brush_Hypercolor.png");
const brushHyperGridMap = useTexture("/Textures/Brush_HyperGrid.png");
const brushInkMap = useTexture("/Textures/Brush_Ink.png");
const brushSmokeMap = useTexture("/Textures/Brush_Smoke.png");
const brushSoftHiglighterMap = useTexture(
  "/Textures/Brush_SoftHighlighter.png"
);
const brushStreamersMap = useTexture("/Textures/Brush_Streamers.png");
const brushThickPaintMap = useTexture("/Textures/Brush_ThickPaint.png");
const brushWigglyGraphiteMap = useTexture("/Textures/Brush_WigglyGraphite.png");
const brushWaveFormMap = useTexture("/Textures/Brush_Waveform.png");
  const { nodes, materials } = useGLTF("/Model11.glb");
  const myMesh = React.useRef()
  useFrame(({ clock }) => {
    myMesh.current.rotation.y = clock.getElapsedTime()/5
  })

 
  return (
    <group ref={myMesh} {...props} dispose={null} position={[0,1,0]} scale={2}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_NeonPulse_g0_b0.geometry}
        material={materials.brush_NeonPulse}
       ><meshPhongMaterial  emissive={"red"}  color={"red"} emissiveIntensity={9}   transparent={true} opacity={0.3}/></mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_Waveform_g0_b0.geometry}
        material={materials.brush_Waveform}
      ><meshStandardMaterial map={brushWaveFormMap}  color={"white"} transparent={true} /></mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_ThickPaint_g0_b0.geometry}
        material={materials.brush_ThickPaint}
       ><meshStandardMaterial  color={"purple"}  map={brushThickPaintMap}  transparent={true}/></mesh>
    </group>
  );
}

useGLTF.preload("/Model11.glb");