/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { DoubleSide } from "three";
import { useFrame } from "@react-three/fiber";
export function Model8(props) {
  const brushBubblesMap = useTexture("/Textures/Brush_Bubbles.png");
  const brushCometMap = useTexture("/Textures/Brush_Comet.png");
  const brushDiamondHullMap = useTexture("/Textures/Brush_DiamondHull.png");
  const brushDotsMap = useTexture("/Textures/Brush_Dots.png");
  const brushDuctTapeMap = useTexture("/Textures/Brush_DuctTape.png");
  const brushEmbersMap = useTexture("/Textures/Brush_Embers.png");
  const brushHyperColorMap = useTexture("/Textures/Brush_Hypercolor.png");
  const brushHyperGridMap = useTexture("/Textures/Brush_HyperGrid.png");
  const brushInkMap = useTexture("/Textures/Brush_Ink.png");
  const brushSmokeMap = useTexture("/Textures/Brush_Smoke.png");
  const brushSoftHiglighterMap = useTexture(
    "/Textures/Brush_SoftHighlighter.png"
  );
  const brushStreamersMap = useTexture("/Textures/Brush_Streamers.png");
  const brushThickPaintMap = useTexture("/Textures/Brush_ThickPaint.png");
  const brushWigglyGraphiteMap = useTexture("/Textures/Brush_WigglyGraphite.png");
  const { nodes, materials } = useGLTF("/Model8.glb");
  const myMesh = React.useRef()
useFrame(({ clock }) => {
  myMesh.current.rotation.y = clock.getElapsedTime()/5
})
 
  return (
    <group ref={myMesh} {...props} dispose={null} scale={3} position={[0,1,0]}>
      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_Streamers_g0_b0.geometry}
        material={materials.brush_Streamers}
        ><meshPhongMaterial map={brushStreamersMap}  emissive={"red"}  emissiveIntensity={2}   transparent={true} opacity={0.7}/></mesh> */}
      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_DiamondHull_g0_b0.geometry}
        material={materials.brush_DiamondHull}
        ><meshPhongMaterial map={brushDiamondHullMap}  emissive={"red"}  emissiveIntensity={2}   transparent={true} opacity={0.7}/></mesh> */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_SoftHighlighter_g0_b0.geometry}
        material={materials.brush_SoftHighlighter}
        ><meshPhongMaterial map={brushSoftHiglighterMap}  emissive={"green"}  color={"yellow"} emissiveIntensity={4}   transparent={true} opacity={0.7}/></mesh>
      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_Petal_g0_b0.geometry}
        material={materials.brush_Petal}
        ><meshPhongMaterial   emissive={"red"}  emissiveIntensity={2}   transparent={true} opacity={0.7}/></mesh> */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_ThickPaint_g0_b0.geometry}
        material={materials.brush_ThickPaint}
        ><meshPhongMaterial emissive={"yellow"}  emissiveIntensity={0.3} side={DoubleSide} map={brushThickPaintMap}  color={"#FFDD71"} transparent={true} opacity={1}/></mesh>
      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_Ink_g0_b0.geometry}
        material={materials.brush_Ink}
       > <meshStandardMaterial side={DoubleSide} map={brushInkMap}  color={"#F2C05A"} transparent={true} opacity={0.5}/></mesh> */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_Disco_g0_b0.geometry}
        material={materials.brush_Disco}
      />
      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_WigglyGraphite_g0_b0.geometry}
        material={materials.brush_WigglyGraphite}
      ><meshStandardMaterial side={DoubleSide} map={brushThickPaintMap}  color={"#F2C05A"} transparent={true} opacity={0.5}/></mesh> */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_DuctTape_g0_b0.geometry}
        material={materials.brush_DuctTape}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.brush_Electricity_g0_b0.geometry}
        material={materials.brush_Electricity}
       > <meshBasicMaterial   color={"yellow"}  /></mesh>
    </group>
  );
}

useGLTF.preload("/Model8.glb");
