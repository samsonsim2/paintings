/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import * as THREE from "three";
import { extend } from '@react-three/fiber'
import { Color, AdditiveBlending } from 'three'
import { OrbitControls, Sparkles, SpotLight, shaderMaterial, useDepthBuffer, useGLTF, useTexture } from "@react-three/drei";
export function LightBase(props) {

    const ColorShiftMaterial = shaderMaterial(
        { time: 0, color: new THREE.Color(0.2, 0.0, 0.1) },
        // vertex shader
        /*glsl*/`
        varying vec3 v_eye;
        varying vec3 v_normal;
        
        void main() {
          vec4 mPos = modelMatrix * vec4(position, 1.0);
          v_eye = normalize(mPos.xyz - cameraPosition);
          v_normal = normal;
        
          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
        }
        `,
        // fragment shader
        /*glsl*/`
        varying vec3 v_eye;
        varying vec3 v_normal;
        
        float Fresnel(vec3 eyeVector, vec3 worldNormal) {
          return pow(1.0 + dot(eyeVector, worldNormal), 2.5);
        }
        
        void main() {
          vec3 color = vec3(1.0, 1.0, 0.5);
        
          float fresnel = Fresnel(v_eye, normalize(v_normal));
          float a = pow(fresnel * 0.3, 1.2);  
          color *= fresnel;
        
          gl_FragColor = vec4(color, a );
        }
        `
      )
      extend({ ColorShiftMaterial })
  const { nodes, materials } = useGLTF("/LightBase.gltf");
  return (
    <group {...props} dispose={null} scale={0.03}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cloner.geometry}
        material={nodes.Cloner.material}
        position={[-49.863, 0, 0]}
      ><colorShiftMaterial   transparent/></mesh>
    </group>
  );
}

useGLTF.preload("/LightBase.gltf");
